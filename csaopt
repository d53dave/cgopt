#!/usr/bin/env python3

import sys
import click
import asyncio



from app.model import Model
from app.utils import internet_connectivity_available, get_configs
from app.msgqclient.client import QueueClient
from app.model_loader.model_loader import ModelLoader
from app import Runner


CONTEXT_SETTINGS = dict(help_option_names=['-h', '--help'])


def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)


@click.group()
@click.version_option(version='1.0.0')
@click.pass_context
def cli(ctx):
    try:
        internal_conf = get_configs('app/internal/csaopt-internal.conf')
        ctx.obj['internal_conf'] = internal_conf
        print('Configs loaded')
    except Exception as e:
        eprint('Could not load configs', e)
        sys.exit(1)


@cli.command(name='run',
             help='Run the optimization based on the provided config and model.')
@click.option('--model',
              default='user_model/',
              type=click.Path(exists=True, resolve_path=True),
              help='Folder containing the model that should be used for optimization.')
@click.option('--conf',
              default='conf/csaopt.conf',
              type=click.Path(exists=True, resolve_path=True),
              help='Path to the CSAOpt config. If not provided, \'conf/csaopt.conf\' will be used')
@click.pass_context
def run_opt(ctx, model, conf):
    print('Called run', ctx, model, conf)
    print('Has internet: ', internet_connectivity_available())

    runner = Runner()
    runner.start()

    runner.wait_for_complete()


@cli.command(name='check',
             help='Check and validate the provided configuration and model.')
@click.option('--model',
              type=click.Path(exists=True, resolve_path=True),
              help='Folder containing the model that should be used for optimization.')
@click.option('--conf',
              default='conf/csaopt.conf',
              type=click.Path(exists=True, resolve_path=True),
              help='Path to the CSAOpt config. If not provided, \'conf/csaopt.conf\' will be used')
@click.option('--with-aws',
              is_flag=True,
              default=False,
              help='If enabled, the check will also spin up EC2 instances to verify configuration and communication.')
def run_check(**kwargs):
    print('Check called')


@cli.command(name='cleanup',
             help='Clean up generated files and terminate any running EC2 instances')
def cleanup():
    raise NotImplementedError


if __name__ == '__main__':
    print('Running CSAOpt')
    cli(obj={})
